---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by likai.
--- DateTime: 2018/5/19 下午5:04
--- 场景管理器

SM = {}

function SM.AddScene(sceneConfName, sceneClass, callBack, showLoading)
    SM.ins:AddScene(sceneConfName, sceneClass, callBack, showLoading)
end

function SM.RemoveScene(scene, callBack)
    SM.ins:RemoveScene(scene, callBack)
end

local SceneManager = class("SceneManager")

function SceneManager:Ctor(callBack)

    SM.ins = self
    local fun = function()
            sceneMgr:LoadSceneAsync("BaseScene", callBack,
                    UnityEngine.SceneManagement.LoadSceneMode.Single)
    end

    --print("SceneManager:Ctor", Application.isEditor, AppConst.BundleMode, AppConst.GameServerIP)
    if Application.isEditor == true and AppConst.BundleMode == false then
        --print("SceneManager:Ctor1")
        fun()
    else
        --print("SceneManager:Ctor2")
        local mainAbName = "scene_" .. string.lower("BaseScene")
        resMgr:LoadAssetBundle(mainAbName, true, fun)
    end
end

local nowScenes = {}

function SceneManager:AddScene(sceneConfName, sceneClass, callBack, showLoading)
    if self.isLoading == true then
        print("当前有场景正在加载中~~~", sceneConfName)
        return
    end
    local sceneConf = SceneConfig[sceneConfName]
    if not sceneConf then
        return
    end

    ---已有改场景，清理之前绑定在该场景的相关代码资源
    if nowScenes[sceneConfName] then

        local scene = nowScenes[sceneConfName].scene
        local lua = nowScenes[sceneConfName].lua
        if lua then
            lua:Destroy()
        end
        local luaScene
        if sceneClass then
            luaScene = sceneClass.New(scene)
        end

        nowScenes[sceneConfName] = {scene=scene, lua=luaScene}
        if callBack then
            callBack(scene)
        end
        return
    end

    local mainAbName = "scene_" .. string.lower(sceneConf.sceneName)

    self.isLoading = true




    ---加载时显示进度条界面
    if showLoading == true then
        if not SM.loadingUI then
            SM.loadingUI = require("Modules.Common.View.SceneLoading").New() ---@type SceneLoading
        end
        SM.loadingUI:Show(mainAbName)

        AddEventListener(Stage, Event.UPDATE, function ()
            local abRequest = resMgr:GetLoadingRequestInfo(mainAbName) ---@type UnityEngine.AssetBundleCreateRequest
            local progress
            if not abRequest then
                progress = 1
            else
                progress = abRequest.progress
            end
            SM.loadingUI:SetProgress(progress)
            --print("场景加载中~~", progress)
        end, SM.loadingUI)
    end

    local fun = function()
        ---@param scene UnityEngine.SceneManagement.Scene
        sceneMgr:LoadSceneAsync(sceneConf.sceneName, function (scene)
            print("SceneManager:AddScene", sceneConf.sceneName, callBack, showLoading, scene)
            if showLoading == true then
                SM.loadingUI:Hide()
                RemoveEventListener(Stage, Event.UPDATE, nil, SM.loadingUI)
            end

            self.isLoading = false
            local luaScene
            if sceneClass then
                luaScene = sceneClass.New(scene)
            end

            nowScenes[sceneConfName] = {scene=scene, lua=luaScene}
            if callBack then
                callBack(scene)
            end

        end, UnityEngine.SceneManagement.LoadSceneMode.Additive)
    end

    print("是否需要加载场景资源~~~", mainAbName, AppConst.BundleMode)
    if AppConst.BundleMode == false then
        fun()
    else
        print("开始加载场景资源~~~", mainAbName)
        resMgr:LoadAssetBundle(mainAbName, true, fun)

    end
end

function SceneManager:RemoveScene(scene, callBack)
    for i, v in pairs(nowScenes) do
        if v.scene == scene then
            nowScenes[i] = nil
            break
        end
    end
    sceneMgr:UnLoadSceneAsync(scene, callBack)
end

return SceneManager