---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by sunshuo.
--- DateTime: 2023/2/13 10:43
--- 事件管理器

---@class Event.EventListener
---@field type string 事件类型
---@field callback fun() 执行回调
---@field caller any 执行域

---@class Event.Event
---@field type string 事件类型
---@field data any 事件数据

---@class Event.EventManager
local EventManager = {}

local eventMap = {} ---@type table<string, Event.EventListener[]> 事件监听容器
local eventPool = {} ---@type table<number, Event.Event> 事件缓存池

---添加事件监听
function EventManager.AddEventListener(type, callback, caller)
    if eventMap[type] == nil then
        eventMap[type] = {}
    end
    local list = eventMap[type]
    if next(list) ~= nil then
        for i = 1, #list do
            local item = list[i] ---@type EventListener
            if item.callback == callback and item.caller == caller then
                LogError("事件监听重复注册 type:", type)
                return
            end
        end
    end
    local listener = {}
    listener.type = type
    listener.callback = callback
    listener.caller = caller
    table.insert(list, listener)
end

---移除事件监听
function EventManager.RemoveEventListener(type, callback, caller)
    local list = eventMap[type]
    if list == nil then
        LogError("事件监听未被注册 type:", type)
        return
    end

    for i = 1, #list do
        local item = list[i] ---@type Event.EventListener
        if item.callback == callback and item.caller == caller then
            table.remove(list, i)
            return
        end
    end
end

---派发事件
function EventManager.DispatchEvent(type, data)
    local list = eventMap[type]
    if list == nil then
        LogError("事件监听未被注册 type:", type)
        return
    end

    ---获取event
    local event
    if next(eventPool) == nil then
        event = {}
        table.insert(eventPool, event)
    else
        event = table.remove(eventPool)
    end
    event.type = type
    event.data = data

    for i = 1, #list do
        local item = list[i]
        if item.caller then
            item.callback(item.caller, event)
        else
            item.callback(event)
        end
    end

    ---回收event
    event.type = nil
    event.data = nil
    table.insert(eventPool, event)
end

---打印事件管理相关数据
function EventManager._printEventMap()
    for type,list in pairs(eventMap) do
        print(string.format("正在监听%s事件 监听数量:%s", type, #list))
    end
    print(string.format("事件缓存池数量：%s", #eventPool))
end
return EventManager