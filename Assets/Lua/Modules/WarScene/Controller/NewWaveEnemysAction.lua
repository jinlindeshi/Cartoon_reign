---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by VIVA.
--- DateTime: 2023/1/26 12:34
--- 刷新一波怪

local BaseAction = require("Prayer.Core.BaseAction")
local WarData = require("Modules.WarScene.Model.WarData")
local WarAvatar = require("Modules.WarScene.View.WarAvatar")
local SData = require("Modules.WarScene.Model.SData")
---@class NewWaveEnemysAction:BaseAction
local NewWaveEnemysAction = class("NewWaveEnemysAction", BaseAction)

function NewWaveEnemysAction:Ctor(avatar, bToLua, cAction, paramFloat, paramBool)
    NewWaveEnemysAction.super.Ctor(self, bToLua, cAction, paramFloat, paramBool)
    self.avatar = avatar ---@type WarAvatar
end

function NewWaveEnemysAction:OnStart()
    if WarData.patrolNodeIndex < 0 then
        WarData.patrolNodeIndex = 0
    end

    WarData.patrolNodeIndex = WarData.patrolNodeIndex + 1
    local nodeTable = WarData.patrolNodePath[WarData.patrolNodeIndex]
    if WarData.patrolNodeIndex == #WarData.patrolNodePath then
        WarData.patrolNodeIndex = 0
    end

    local grids = WarData.GetAroundGrids(nodeTable[1], nodeTable[2], nil, true)
    local gridList = {}
    table.insert(gridList, {nodeTable[1], nodeTable[2]})
    for x, tb in pairs(grids) do
        for z, v in pairs(tb) do
            table.insert(gridList, {x,z})
        end
    end

    local pointList = SData.GetMonsterPointSData(DemoCfg.mapID)
    local data = pointList[WarData.patrolNodeIndex]
    if data == nil then
        data = pointList[1]
    end
    --for i = 1, 1 do
    for i = 1, #data.monsters do
        WarData.avatarIdIndex = WarData.avatarIdIndex + 1
        local enemyData = clone(SData.GetMonsterSData(data.monsters[i]))
        enemyData.id = WarData.avatarIdIndex
        enemyData.hp = enemyData.maxHp
        local avatar = WarAvatar.New(enemyData.prefab,
                enemyData, false, WarData.scene.avatarConTran)
        avatar:SetExternalBehavior("BehaviorTree/EnemyAI.asset")
        WarData.AddAvatar(avatar, avatar.data)
        WarData.scene:PutInNode(avatar, gridList[i][1], gridList[i][2])
        HappyFuns.SetLayerRecursive(avatar.gameObject, 11)
        avatar:AIStart()
    end

    --print("NewWaveEnemysAction:OnStart")
    self.cAction:SetUpdateStatus(TaskStatus.Success)
end

function NewWaveEnemysAction:OnPause(paused)
    --print("NewWaveEnemysAction:OnPause", paused)
    --self.paused = paused
end

return NewWaveEnemysAction