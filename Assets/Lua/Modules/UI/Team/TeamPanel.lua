---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2023/2/23 14:48
---
local TeamHeroItem = require("Modules.UI.Team.TeamHeroItem")
local TeamSlotItem = require("Modules.UI.Team.TeamSlotItem")
local AvatarData = require("Modules.WarScene.Model.AvatarData")
local WarData = require("Modules.WarScene.Model.WarData")
local TeamModel = require("Modules.UI.Team.Model.TeamModel")
---@class UI.Team.TeamPanel:UI.BasePanel
---@field New fun():UI.Team.TeamPanel
local TeamPanel = class("UI.Team.TeamPanel", BasePanel)

function TeamPanel:Init()
    TeamPanel.super.Init(self)
    self.teamRoot = self.transform:Find("Root/teamRoot")
    self.heroContent = self.transform:Find("Root/bottomBg/Scroll View/Viewport/Content")

    self.teamSlotList = {}
    for i = 1, 4 do
        local item = TeamSlotItem.New(self.teamRoot:Find("teamItem"..i).gameObject, i)
        table.insert(self.teamSlotList, item)
    end
    self:RefreshHeroList()

    EventMgr.AddEventListener(TeamModel.eventDefine.autoAddTeam, self.OnAutoAddTeam, self)
    EventMgr.AddEventListener(TeamModel.eventDefine.removeTeam, self.OnRemoveTeam, self)

end

local itemPosCfg =
{
    rowCount = 4,
    gapY = 20
}
function TeamPanel:RefreshHeroList()
    self.heroList = {}
    local heroList = {}
    local heroInfo = AvatarData.HeroInfo
    for id,info in pairs(heroInfo) do
        if id ~= DemoCfg.mainAvatarID then
            table.insert(heroList, info)
        end
    end
    local count = #heroList
    local contentHeight = 0
    local itemHeight
    for i = 1, count do
        local info = heroList[i]
        local item = TeamHeroItem.New(self.heroContent, info)
        table.insert(self.heroList, item)
        if itemHeight == nil then
            local rect = GetComponent.RectTransform(item.gameObject)
            itemHeight = rect.rect.height
        end
    end
    local rowCount = math.ceil(count/itemPosCfg.rowCount)
    contentHeight = rowCount * (itemHeight or 110) + (rowCount - 1) * itemPosCfg.gapY
    local centRect = GetComponent.RectTransform(self.heroContent.gameObject)
    if contentHeight < centRect.rect.height then
        contentHeight = centRect.rect.height
    end
    centRect.sizeDelta = Vector2.New(0, contentHeight)
end

function TeamPanel:AddTeam(index, id)
    TeamModel.HeroSlotMap[index].id = id
    self.teamSlotList[index]:SetHero(id)
    self:RefreshHeroInTeam()
end

function TeamPanel:RemoveTeam(index)
    TeamModel.HeroSlotMap[index].id = nil
    self.teamSlotList[index]:SetHero(nil)
    self:RefreshHeroInTeam()
end

function TeamPanel:RefreshHeroInTeam()
    for i = 1, #self.heroList do
        self.heroList[i]:RefreshInTeam()
    end
end

function TeamPanel:OnAutoAddTeam(event)
    local id
    if #self.heroList > 1 then
        table.sort(self.heroList, function(a, b) return a.data.quality > b.data.quality end)
        id = self.heroList[1].id
    elseif #self.heroList == 1 then
        id = self.heroList[1].id
    else
        return
    end
    self:AddTeam(event.data.index, id)
end

function TeamPanel:OnRemoveTeam(event)
    self:RemoveTeam(event.data.index)
end

function TeamPanel:RemoveListeners()
    TeamPanel.super.RemoveListeners(self)
    EventMgr.RemoveEventListener(TeamModel.eventDefine.autoAddTeam, self.OnAutoAddTeam, self)
    EventMgr.RemoveEventListener(TeamModel.eventDefine.removeTeam, self.OnRemoveTeam, self)

end

function TeamPanel:OnDestroy()
    TeamPanel.super.OnDestroy(self)
    for _, info in pairs(TeamModel.HeroSlotMap) do
        if info.id and WarData.avatarTeam[info.id] == nil then
            WarData.scene:TeamAddAvatar(info.id)
        end
    end
    for _, avatar in pairs(WarData.avatarTeam) do
        if TeamModel.CheckInTeam(avatar.data.id) == false then
            WarData.scene:TeamRemoveAvatar(avatar.data.id)
        end
    end
end

return TeamPanel